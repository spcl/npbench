import jax
import jax.numpy as jnp
from jax import lax

@jax.jit
def kernel(TSTEPS: int, A: jnp.ndarray, B: jnp.ndarray):
    def time_step(t, arrays):
        A, B = arrays

        B = B.at[1:-1, 1:-1, 1:-1].set(
            0.125 * (A[2:, 1:-1, 1:-1] - 2.0 * A[1:-1, 1:-1, 1:-1] + A[:-2, 1:-1, 1:-1]) +
            0.125 * (A[1:-1, 2:, 1:-1] - 2.0 * A[1:-1, 1:-1, 1:-1] + A[1:-1, :-2, 1:-1]) +
            0.125 * (A[1:-1, 1:-1, 2:] - 2.0 * A[1:-1, 1:-1, 1:-1] + A[1:-1, 1:-1, :-2]) +
            A[1:-1, 1:-1, 1:-1]
        )
        A = A.at[1:-1, 1:-1, 1:-1].set(
            0.125 * (B[2:, 1:-1, 1:-1] - 2.0 * B[1:-1, 1:-1, 1:-1] + B[:-2, 1:-1, 1:-1]) +
            0.125 * (B[1:-1, 2:, 1:-1] - 2.0 * B[1:-1, 1:-1, 1:-1] + B[1:-1, :-2, 1:-1]) +
            0.125 * (B[1:-1, 1:-1, 2:] - 2.0 * B[1:-1, 1:-1, 1:-1] + B[1:-1, 1:-1, :-2]) +
            B[1:-1, 1:-1, 1:-1]
        )

        return A, B

    A, B = lax.fori_loop(1, TSTEPS, time_step, (A, B))
    return A, B
